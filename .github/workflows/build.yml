name: build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04] #, macos-14]
        compiler: [clang]
        crypto: [openssl]
        bittorrent: [with-bt]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Linux setup
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install \
          g++-12 \
          clang-15 \
          autoconf \
          automake \
          autotools-dev \
          autopoint \
          libtool \
          pkg-config \
          libssl-dev \
          libgnutls28-dev \
          libc-ares-dev \
          zlib1g-dev \
          libsqlite3-dev \
          libssh2-1-dev \
          libcppunit-dev \
          xz-utils \
          patch
    - name: MacOS setup
      if: runner.os == 'macOS'
      run: |
        brew install cppunit gettext openssl libssh2 c-ares sqlite3 \
          autoconf automake pkg-config libtool xz coreutils
    - name: Unpack and patch aria2
      run: |
        wget https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0.tar.xz
        tar --strip-components=1 -xf aria2-1.37.0.tar.xz
        rm aria2-1.37.0.tar.xz
        patch -p1 < semicolon.patch
        semicolon.patch
    - name: Setup clang (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang-15' >> $GITHUB_ENV
        echo 'CXX=clang++-15' >> $GITHUB_ENV
    - name: Setup clang (MacOS)
      if: runner.os == 'macOS' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang' >> $GITHUB_ENV
        echo 'CXX=clang++' >> $GITHUB_ENV
    - name: Libtool
      run: |
        autoreconf -i
    - name: Setup compiler flags
      run: |
        asanflags="-fsanitize=address,undefined -fno-sanitize-recover=undefined"

        CPPFLAGS="$asanflags -g3"
        LDFLAGS="$asanflags"

        echo 'CPPFLAGS='"$CPPFLAGS" >> $GITHUB_ENV
        echo 'LDFLAGS='"$LDFLAGS" >> $GITHUB_ENV
    - name: Configure autotools (Linux, openssl)
      if: runner.os == 'Linux' && matrix.crypto == 'openssl'
      run: |
        ./configure --without-gnutls --with-openssl $FEATURE_FLAGS
    - name: Configure autotools (macOS)
      if: runner.os == 'macOS'
      run: |
        ./configure \
          --without-openssl --without-gnutls --with-appletls \
          --disable-nls
    - name: Build aria2
      run: |
        make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)"
        mkdir -p binaries/$ImageOS
        cp src/aria2c ./binaries/$ImageOS/aria2c
    - name: compressing binaries and compute hash
      id: computedHash
      run: |
        echo creating binaries.tar.xz file
        tar -cJf binaries.tar.xz binaries semicolon.patch
        sha1sumhash=$(sha1sum binaries.tar.xz | cut -d' ' -f1)
        echo creating binaries.tar.xz.$sha1sumhash.SHA1 file
        echo $sha1sumhash > binaries.tar.xz.$sha1sumhash.SHA1
        echo "sha1sumhash=$sha1sumhash" >> "$GITHUB_OUTPUT"

    - uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: binaries.tar.xz

    - uses: actions/upload-artifact@v4
      with:
        name: checksum-${{ steps.computedHash.outputs.sha1sumhash }}
        path: binaries.tar.xz.*.SHA1

    - uses: softprops/action-gh-release@v1
      with:
        files: |
         binaries.tar.xz
         binaries.tar.xz.*.SHA1
        
